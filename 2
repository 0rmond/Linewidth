import data
import matplotlib.pyplot as plt
import plot
import numpy as np
from itertools import zip_longest
from typing import List

def pair_up(xs: List):
    evens = xs[::2]
    odds = xs[1::2]
    return zip_longest(evens, odds)

def main():

    # TODO
    # 1. convert things to pandas dataframes
    # 2. 

    # FFT ON DATA FROM MULTIPLE COLLECTIONS/RUNS #
    FOLDER = "02-10-2023"
    COMMON_FNAME = "rawdata"
    raw_data_files = data.get_list_of_files(FOLDER, COMMON_FNAME)
    each_files_time_data = list(map(data.read_data, raw_data_files))

    bins = [ 1E-9, 1E-8, 1E-7, 1E-6, 1E-5]

    binned_data = list(map(
        lambda bin: data.bin_times(each_files_time_data[0], bin)
        .pipe(data.convert_time_to_freq_space),
        bins
    ))


    each_files_frequency_data = list(map(
        lambda time_data: (time_data
            .pipe(data.convert_time_to_freq_space)
            .pipe(data.crop_data)
        ),
        each_files_time_data
    ))

    average_data = data.average_over_runs(each_files_frequency_data)

    # FFT ON DATA THAT HAS ALREADY BEEN AVERAGED BY LECROY #

    """
    lecroy_data = (
        data.read_data(f"{FOLDER}/averagefft.csv")
        .pipe(data.crop_data)
    )

    """

    """
    flipped_amps = data.flip_data(cropped_lecroy_amp)
    peaks = data.get_peak_locations(flipped_amps)

    n_mask = data.number_peaks(cropped_lecroy_freq, peaks)
    N = 3
    filtered_peaks = data.filter_n_peaks(peaks, n_mask, N)
    desired_n = list(filter(lambda n: n <= N, n_mask))


    model_linewidth = np.arange(0, 200E3, 1)
    model_delS = list(map(plot.delS, model_linewidth))
    """

    """
    fig, (ax1, ax2, ax3) = plt.subplots(1,3)
    """
    figu, ((ax1, ax2, ax3), (ax4, ax5, ax6)) = plt.subplots(2,3)

    """
    single_run_time = each_files_time_data[0]

    single_run_time.plot(
        ax = ax1,
        color = "black",
    )

    ax1.set_xlabel(r"Time [$\mu s$]")
    ax1.set_ylabel(r"Voltage [$mV$]")

    # AX 2 #

    """
    n_samples = len(each_files_frequency_data)
    single_run_freq = each_files_frequency_data[0]
    single_run_freq.plot(
        ax = ax1,
        #color = "green",
        alpha = 1,
    )

    """
    average_data.plot(
        ax = ax2,
        color = "blue",
        alpha = 0.75,
    )

    lecroy_data.plot(
        ax = ax2,
        color = "blue",
        alpha = 1,
    )

    ax2.set_xlabel("Frequency [MHz]")
    ax2.set_ylabel("Power [dB]")
    ax2.legend([
        "n samples=1",
        f"n samples={n_samples}",
        f"n_samples=200"
    ])
    """

    # AX 3 #

    
    axes = [ax2, ax3, ax4, ax5, ax6]
    list(map(
        lambda ax, data: data.plot(ax=ax),
        axes,
        binned_data,
    ))

    handles = list(map(lambda ax: ax.get_legend_handles_labels()[0], [ax1, *axes]))
    plt.legend(
    handles,
    [
        "Original",
        "1 nano second bins",
        "10 nano second bins",
        "0.1 micro second bins",
        "1 micro second bins",
        "0.1 millisecond bins"
    ])
    #ax3.plot(model_linewidth/1E3, model_delS)
    #ax3.set_xlabel("Linewidth [kHz]")
    #ax3.set_ylabel(r"$\Delta S$ [dB]")


    plt.show()


if __name__ == "__main__":
    main()
